{"contractName":"DutchXBaseModule","abi":[{"constant":true,"inputs":[],"name":"dutchXAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"whitelistedTokens","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"manager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"uint256"}],"name":"whitelistedOperators","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"isOperator","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_masterCopy","type":"address"}],"name":"changeMasterCopy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"isWhitelistedToken","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"dx","type":"address"},{"name":"tokens","type":"address[]"},{"name":"operators","type":"address[]"},{"name":"_manager","type":"address"}],"name":"setup","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"token","type":"address"}],"name":"addToWhitelist","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"token","type":"address"}],"name":"removeFromWhitelist","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"addOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"operator","type":"address"}],"name":"removeOperator","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"dx","type":"address"}],"name":"changeDXProxy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"to","type":"address"},{"name":"value","type":"uint256"},{"name":"data","type":"bytes"}],"name":"executeWhitelisted","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getWhitelistedTokens","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getWhitelistedOperators","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"}],"bytecode":"0x","deployedBytecode":"0x","sourceMap":"","deployedSourceMap":"","source":"pragma solidity 0.5.0;\nimport \"gnosis-safe/contracts/base/Module.sol\";\n\n\n/// @title DutchX Base Module - Expose a set of methods to enable a Safe to interact with a DX\n/// @author Denis Granha - <denis@gnosis.pm>\ncontract DutchXBaseModule is Module {\n\n  address public dutchXAddress;\n  // isWhitelistedToken mapping maps destination address to boolean.\n  mapping (address => bool) public isWhitelistedToken;\n  mapping (address => bool) public isOperator;\n\n  // helper variables used by the CLI\n  address[] public whitelistedTokens; \n  address[] public whitelistedOperators;\n\n  /// @dev Setup function sets initial storage of contract.\n  /// @param dx DutchX Proxy Address.\n  /// @param tokens List of whitelisted tokens.\n  /// @param operators List of addresses that can operate the module.\n  /// @param _manager Address of the manager, the safe contract.\n  function setup(address dx, address[] memory tokens, address[] memory operators, address payable _manager)\n      public\n  {\n      require(address(manager) == address(0), \"Manager has already been set\");\n      if (_manager == address(0)){\n        manager = ModuleManager(msg.sender);\n      }\n      else{\n        manager = ModuleManager(_manager);\n      }\n\n      dutchXAddress = dx;\n\n      for (uint256 i = 0; i < tokens.length; i++) {\n          address token = tokens[i];\n          require(token != address(0), \"Invalid token provided\");\n          isWhitelistedToken[token] = true;\n      }\n\n      whitelistedTokens = tokens;\n\n      for (uint256 i = 0; i < operators.length; i++) {\n          address operator = operators[i];\n          require(operator != address(0), \"Invalid operator address provided\");\n          isOperator[operator] = true;\n      }\n\n      whitelistedOperators = operators;\n  }\n\n  /// @dev Allows to add token to whitelist. This can only be done via a Safe transaction.\n  /// @param token ERC20 token address.\n  function addToWhitelist(address token)\n      public\n      authorized\n  {\n      require(token != address(0), \"Invalid token provided\");\n      require(!isWhitelistedToken[token], \"Token is already whitelisted\");\n      isWhitelistedToken[token] = true;\n      whitelistedTokens.push(token);\n  }\n\n  /// @dev Allows to remove token from whitelist. This can only be done via a Safe transaction.\n  /// @param token ERC20 token address.\n  function removeFromWhitelist(address token)\n      public\n      authorized\n  {\n      require(isWhitelistedToken[token], \"Token is not whitelisted\");\n      isWhitelistedToken[token] = false;\n\n      for (uint i=0; i<whitelistedTokens.length - 1; i++)\n        if(whitelistedTokens[i] == token){\n            whitelistedTokens[i] = whitelistedTokens[whitelistedTokens.length-1];\n            break;\n        }\n      whitelistedTokens.length -=1;\n  }\n\n  /// @dev Allows to add operator to whitelist. This can only be done via a Safe transaction.\n  /// @param operator ethereum address.\n  function addOperator(address operator)\n      public\n      authorized\n  {\n      require(operator != address(0), \"Invalid address provided\");\n      require(!isOperator[operator], \"Operator is already whitelisted\");\n      isOperator[operator] = true;\n      whitelistedOperators.push(operator);\n  }\n\n  /// @dev Allows to remove operator from whitelist. This can only be done via a Safe transaction.\n  /// @param operator ethereum address.\n  function removeOperator(address operator)\n      public\n      authorized\n  {\n      require(isOperator[operator], \"Operator is not whitelisted\");\n      isOperator[operator] = false;\n\n      for (uint i=0; i<whitelistedOperators.length - 1; i++)\n        if(whitelistedOperators[i] == operator){\n            whitelistedOperators[i] = whitelistedOperators[whitelistedOperators.length-1];\n            break;\n        }\n      whitelistedOperators.length -=1;\n\n  }\n\n  /// @dev Allows to change DutchX Proxy contract address. This can only be done via a Safe transaction.\n  /// @param dx New proxy contract address for DutchX.\n  function changeDXProxy(address dx)\n      public\n      authorized\n  {\n      require(dx != address(0), \"Invalid address provided\");\n      dutchXAddress = dx;\n  }\n\n  /// @dev Abstract method. Returns if Safe transaction is to DutchX contract and with whitelisted tokens.\n  /// @param to Dutch X address or Whitelisted token (only for approve operations for DX).\n  /// @param value Not checked.\n  /// @param data Allowed operations\n  /// @return Returns if transaction can be executed.\n  function executeWhitelisted(address to, uint256 value, bytes memory data)\n      public\n      returns (bool);\n\n\n   /// @dev Returns list of whitelisted tokens.\n   /// @return List of whitelisted tokens addresses.\n   function getWhitelistedTokens()\n     public\n     view\n     returns (address[] memory)\n   {\n     return whitelistedTokens;\n   }\n\n   /// @dev Returns list of whitelisted operators.\n   /// @return List of whitelisted operators addresses.\n   function getWhitelistedOperators()\n     public\n     view\n     returns (address[] memory)\n   {\n     return whitelistedOperators;\n   }\n}\n","compiler":{"name":"solc","version":"0.5.0+commit.1d4f565a.Emscripten.clang"},"networks":{},"schemaVersion":"2.0.2","updatedAt":"2019-03-07T10:40:36.917Z"}