{"contractName":"DutchXInterface","abi":[{"constant":false,"inputs":[{"name":"token","type":"address"},{"name":"amount","type":"uint256"}],"name":"deposit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"sellToken","type":"address"},{"name":"buyToken","type":"address"},{"name":"auctionIndex","type":"uint256"},{"name":"amount","type":"uint256"}],"name":"postSellOrder","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"sellToken","type":"address"},{"name":"buyToken","type":"address"},{"name":"auctionIndex","type":"uint256"},{"name":"amount","type":"uint256"}],"name":"postBuyOrder","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"auctionSellTokens","type":"address[]"},{"name":"auctionBuyTokens","type":"address[]"},{"name":"auctionIndices","type":"uint256[]"},{"name":"user","type":"address"}],"name":"claimTokensFromSeveralAuctionsAsBuyer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"auctionSellTokens","type":"address[]"},{"name":"auctionBuyTokens","type":"address[]"},{"name":"auctionIndices","type":"uint256[]"},{"name":"user","type":"address"}],"name":"claimTokensFromSeveralAuctionsAsSeller","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"withdraw","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}],"bytecode":"0x","deployedBytecode":"0x","sourceMap":"","deployedSourceMap":"","source":"pragma solidity ^0.5.0;\n\n// @title DutchX Interface - Represents the allowed methods to be executed from the safe module DutchXModule\n/// @author Denis Granha - <denis@gnosis.pm>\ninterface DutchXInterface {\n\tfunction deposit(address token, uint256 amount) external;\n    function postSellOrder(address sellToken, address buyToken, uint256 auctionIndex, uint256 amount) external;\n    function postBuyOrder(address sellToken, address buyToken, uint256 auctionIndex, uint256 amount) external;\n\n    function claimTokensFromSeveralAuctionsAsBuyer(\n        address[] calldata auctionSellTokens, \n        address[] calldata auctionBuyTokens,\n        uint[] calldata auctionIndices, \n        address user\n    ) external;\n\n    function claimTokensFromSeveralAuctionsAsSeller(\n        address[] calldata auctionSellTokens,\n        address[] calldata auctionBuyTokens,\n        uint[] calldata auctionIndices,\n        address user\n    ) external;\n\n    function withdraw() external;\n}","compiler":{"name":"solc","version":"0.5.0+commit.1d4f565a.Emscripten.clang"},"networks":{},"schemaVersion":"2.0.2","updatedAt":"2019-03-07T10:40:36.915Z"}